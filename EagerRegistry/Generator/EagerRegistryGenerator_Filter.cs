using System.Linq;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace EagerRegistry.Generator;

internal sealed partial class EagerRegistryGenerator
{
	private static bool Filter(SyntaxNode node, CancellationToken _)
	{
		return node is ClassDeclarationSyntax { Modifiers: var modifiers }
		       // Exclude static or abstract classes
		       && !modifiers.Any(x => x.IsKind(SyntaxKind.StaticKeyword) || x.IsKind(SyntaxKind.AbstractKeyword))
		       // Exclude nested classes
		       && node.Parent is not ClassDeclarationSyntax
		       // Exclude AutoGenerated classes
		       && !(node.SyntaxTree.FilePath.Contains(".g.") || node.SyntaxTree.FilePath.Contains(".generated."))
		       // With public methods
		       && (node.DescendantNodes().OfType<MethodDeclarationSyntax>()
			           .Any(x => x.Modifiers
				           .Any(y => y.IsKind(SyntaxKind.PublicKeyword)))
		           // Or public properties
		           || node.DescendantNodes().OfType<PropertyDeclarationSyntax>()
			           .Any(x => x.Modifiers
				           .Any(y => y.IsKind(SyntaxKind.PublicKeyword))));
			   
	}
}